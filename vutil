#!/bin/bash

PROGRAM_DIR=$(dirname $(realpath $0))
source "$PROGRAM_DIR/qemu_util.sh" 2>&1 > /dev/null
source "$PROGRAM_DIR/utility.sh" 2>&1 > /dev/null

dependencies=(
    "qemu_util.sh"
    "qemu_util_man.txt"
    "gvtg.sh"
)

# enable or disable it 
dependencyCheck ${dependencies[@]}


DOMAIN=""
GVTG_RUN="$PROGRAM_DIR/gvtg.sh"
ARGS=("$@")

DomainISSet=false
DomainIndex=-1 # zero cuz program to ignore first one shot arg
HelpIndex=0

function set_default_domain {
    p="/tmp/vutil_default_domain"
    if [[ -z $p ]];then
        mktemp -f $p
    fi
    echo $1 > $p
}

#function diffs() {
#        diff "${@:3}" <(sort "$1") <(sort "$2")
#}

function CheckSpecialInput() {

   args_len=${#ARGS[@]}
   for((i=0;i<$args_len;i++)) {
       prefix=${ARGS[i]}
       NIndex=$((i+1))

       next_arg=${ARGS[NIndex]}
        
       case $prefix in 
           "-d" | "--domain")
               if [[ -z $next_arg  ]];then 
                   return
               fi

               echo "Domain is set to ${ARGS[NIndex]}"

               DOMAIN=$next_arg
               DomainIndex=$NIndex
               DomainISSet=true
               break;;

           "-h" | "--help" )
                HelpIndex=$((HelpIndex + 1)) && continue
                break;;

            "--default" )
                set_default_domain $next_arg && continue
                break;;
       esac

   }
}


isPrefix(){
    if [[ "$1" =~ ^"--".* ]] || [[ "$1" =~ ^-.* ]];then
        echo true
    else
        echo false
    fi
}

declare -A pair_args
pair_args_keys=()

MapArg() {
    for((i=0;i<${#ARGS[@]};i++)){
        
        arg=${ARGS[i]}
        n=$((i+1))
        next=${ARGS[n]}
        
        PRE=$(isPrefix $arg)
        [[ $PRE == false ]] && continue
        # skip if arg is to set domain name 
        [[ $i == $DomainIndex ]] || [[ $i == $((DomainIndex - 1)) ]] && continue
        pair_args_keys+=($arg)

        #predict if nxt arg is prefix command / argument
        if [[ !$(isPrefix $next) ]];then
           pair_args[$arg]="$next" && continue
        fi
    }
}



#RUNTIME
Mapper() {
    #echo "new ${newargs["--s"]}"
    case "$1" in
        "--resetpage")
            ResetHugepage ;;
        "--hugepage") 
            AllocateHugepage $2;;
        "--enable-gvtg" | "-eg")
            . $GVTG_RUN --enable;;
        "--disable-gvtg" | "-dg")
            . $GVTG_RUN --disable;;
        "--gvtg-info" | "-i")
            . $GVTG_RUN  --info;;
        "--mount-pa" | "-pa")
            MountPulseaudio ;;
        "--default" )
            echo "setting default!"
            exit 0;;
        "--setup" | "-s")
            setup_vm $GVTG_RUN $2;;
        *)
            echo "invalid command! : $1" ;;
            #print_help;;
    esac
}

#NOOB NOTE ;)
# capture stderr and stream to stdout
# stderr file-descriptor 2
# stdout file-descriptor 1; 
# & indentify file descriptor and not normal file
# so >& means redirect to fd not file
# /dev/null discard 

function check_exception {
   # only print help message and ignore 
   if [[ $HelpIndex > 0 ]];then 
        print_help
        exit
   fi
    
    # if both default and -d is passed prioritize -d instead
    if [[ $DomainISSet == false ]];then
        if [[ -f "/tmp/vutil_default_domain" ]];then
            default=$(cat "/tmp/vutil_default_domain") 
            if [[ -n $default ]];then
                echo "Using the default $default"
                DOMAIN=$default
            else
                echo "Empty Default!"
                exit
            fi
        else
            echo "domain is not set!"
            exit
        fi
    fi

    FAILURE="$(virsh dumpxml $DOMAIN 2>&1 >/dev/null)"
    if [[ -n $FAILURE ]];then
        printf $FAILURE
        echo -n "Invalid Domain name!"
        exit
    fi
}

function scan_commands {
    for key in "${pair_args_keys[@]}" 
    do
        secondary_arg="${pair_args["--hugepage"]}"
        if  [[ -n $secondary_arg ]];then 
            Mapper $key $secondary_arg
        else
            Mapper $key
        fi
    done
}

function runtime {
    check_exception
    MapArg
    scan_commands

}

CheckSpecialInput
runtime

#Mapper
