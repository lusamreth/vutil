#!/bin/bash

PROGRAM_DIR=$(dirname $(realpath $0))
source "$PROGRAM_DIR/utility.sh"
dependencies=(
    "qemu_util.sh"
    "qemu_util_man.txt"
    "gvtg.sh"
    "utility.sh"
    "looking-glass-helper.sh"
)

# enable or disable it 
dependencyCheck ${dependencies[@]}


DOMAIN=""
ARGS=("$@")

DomainISSet=false
DomainIndex=-1 # zero cuz program to ignore first one shot arg
config_path=""

function set_default_domain {
    p="/tmp/vutil_default_domain"
    if [[ -z $p ]];then
        mktemp -f $p
    fi
    echo $1 > $p
}

#function diffs() {
#        diff "${@:3}" <(sort "$1") <(sort "$2")
#}

function CheckSpecialInput() {
   args_len=${#ARGS[@]}
   for((i=0;i<$args_len;i++)) {
       prefix=${ARGS[i]}
       NIndex=$((i+1))

       next_arg=${ARGS[NIndex]}
        
       case $prefix in 
           "-d" | "--domain")
               if [[ -z $next_arg  ]];then 
                   return
               fi

               echo "Domain is set to $next_arg"
               DOMAIN=$next_arg
               DomainIndex=$NIndex
               DomainISSet=true
               break;;
           "-c" | "--config")
               config_path=$next_arg
               continue
               ;;
       esac

   }
}


isPrefix(){
    if [[ "$1" =~ ^"--".* ]] || [[ "$1" =~ ^-.* ]];then
        echo true
    else
        echo false
    fi
}

declare -A pair_args
pair_args_keys=()

MapArg() {
    for((i=0;i<${#ARGS[@]};i++)){
        
        arg=${ARGS[i]}
        n=$((i+1))
        next=${ARGS[n]}
        
        PRE=$(isPrefix $arg)
        [[ $PRE == false ]] && continue
        # skip if arg is to set domain name 
        [[ $i == $DomainIndex ]] || [[ $i == $((DomainIndex - 1)) ]] && continue
        pair_args_keys+=($arg)

        #predict if nxt arg is prefix command / argument
        if [[ ! $(isPrefix $next) ]];then
           pair_args[$arg]="$next" && continue
        fi
    }
}

function startVm {
    virsh start $DOMAIN
    wait $(jobs -p)
    start_err=""
    if [[ -n $start_err ]];then
        echoerr "Cannot Start virtual machine"
        echoerr $start_err
        exit 0
    fi
    echo "Running $DOMAIN"
}

isIndependent=true
#Does not require domain
# if the user don't specify domain pipe
# input through this checker
IndependentCommands() {
    case "$1" in 
   "-h" | "--help" )
        print_help
        exit 0
        break;;
    "--default" )
        echo "setting default to $2"
        set_default_domain $2
        exit 0
        break;;
    "--resetpage" | "-r")
        ResetHugepage 
        ;;
    "--hugepage" | "-h") 
        AllocateHugepage $2
        ;;
    "--enable-gvtg" | "-eg")
        enableGvtg
        ;;
    "--disable-gvtg" | "-dg")
        disableGvtg
        ;;
    "--gvtg-info" | "-i")
        provideGvtgInfo
        ;;
    * )
        isIndependent=false
        if [[ ! $DomainISSet ]];then
            echo "Invalid command: $1"
        fi
    esac
    #isIndependent = "run"
}

function check_exception {
    # if both default and -d is passed prioritize -d instead
    if [[ ! $DomainISSet ]];then
        if [[ -f "/tmp/vutil_default_domain" ]];then
            default=$(cat "/tmp/vutil_default_domain") 
            if [[ -n $default ]];then
                echo "Using the default $default"
                DOMAIN=$default
            else
                echo "Empty Default!"
                exit
            fi
        else
            echo "domain is not set!"
            exit
        fi
    fi
    
    # Test domain
    FAILURE="$(virsh dumpxml $DOMAIN 2>&1 >/dev/null)"
    if [[ -n $FAILURE ]];then
        printf $FAILURE
        echo "Invalid Domain name!"
        exit 1
    fi
}



#RUNTIME
Mapper() {
    check_exception
    #echo "new ${newargs["--s"]}"
    case "$1" in
        "--start" | "-st" ) 
            echo "Starting"
            startVm
            ;;
        "--mount-pa" | "-pa")
            MountPulseaudio 
            ;;
        "--shutdown" | "-off" | "-sd")
            stop_vm $DOMAIN
            ;;
        "--destroy" | "--ds" )
            destroyVm $DOMAIN
            ;;
        "--setup" | "-s")
            startHook $2
            wait $(jobs -p)
            echo "Setup done!"
            ;;
        *)
            IndependentCommands $1
            ;;
            #print_help;;
    esac
}

#NOOB NOTE ;)
# capture stderr and stream to stdout
# stderr file-descriptor 2
# stdout file-descriptor 1; 
# & indentify file descriptor and not normal file
# so >& means redirect to fd not file
# /dev/null discard 

function scan_commands {
    for key in "${pair_args_keys[@]}"
    do
        secondary_arg="${pair_args["$key"]}"
        if [[ $DomainISSet == false ]];then 
            IndependentCommands $key $secondary_arg 
            # IndependentCommands cannot run domain-based command
            # but domain-based can run !
            [[ $isIndependent == false ]] && Mapper $key $secondary_arg 
        else
            Mapper $key $secondary_arg
        fi
    done

}


CheckSpecialInput
MapArg
scan_commands


